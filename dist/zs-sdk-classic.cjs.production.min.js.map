{"version":3,"file":"zs-sdk-classic.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const PRECISION = JSBI.BigInt(1e18)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { Token, Price, TokenAmount, BigintIsh, sqrt, ChainId } from '@zuluswap/zs-sdk-core'\n// import { TokenAmount, Price } from './fractions'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { MINIMUM_LIQUIDITY, ZERO, ONE, PRECISION } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n// import { Token } from './token'\n\n//TODO: rename to Pool object\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  private readonly virtualTokenAmounts: [TokenAmount, TokenAmount]\n  public readonly fee: JSBI\n  public readonly address: string\n  public readonly amp: JSBI\n\n  public constructor(\n    address: string,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    virtualTokenAmountA: TokenAmount,\n    virtualTokenAmountB: TokenAmount,\n    fee: JSBI,\n    amp: JSBI\n  ) {\n    this.address = address\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const virtualTokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [virtualTokenAmountA, virtualTokenAmountB]\n      : [virtualTokenAmountB, virtualTokenAmountA]\n\n    this.liquidityToken = new Token(tokenAmounts[0].currency.chainId, address, 18, 'DMM-LP', 'DMM LP')\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.virtualTokenAmounts = virtualTokenAmounts as [TokenAmount, TokenAmount]\n    this.fee = fee\n    this.amp = amp\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.virtualTokenAmounts[1].divide(this.virtualTokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.virtualTokenAmounts[0].divide(this.virtualTokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  public priceOfReal(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    const r1 = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    const r2 = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return token.equals(this.token0)\n      ? new Price(this.token0, this.token1, r1.denominator, r1.numerator)\n      : new Price(this.token1, this.token0, r2.denominator, r2.numerator)\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public get virtualReserve0(): TokenAmount {\n    return this.virtualTokenAmounts[0]\n  }\n\n  public get virtualReserve1(): TokenAmount {\n    return this.virtualTokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public virtualReserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.virtualReserve0 : this.virtualReserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, TokenAmount[]] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputToken = inputAmount.currency.equals(this.token0) ? this.token1 : this.token0\n    const inputReserve = this.virtualReserveOf(inputAmount.currency)\n    const outputReserve = this.virtualReserveOf(outputToken)\n\n    const inputAmountWithFee = JSBI.divide(\n      JSBI.multiply(inputAmount.quotient, JSBI.subtract(PRECISION, this.fee)),\n      PRECISION\n    )\n\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(inputReserve.quotient, inputAmountWithFee)\n\n    const outputAmount = TokenAmount.fromRawAmount(outputToken, JSBI.divide(numerator, denominator))\n\n    if (JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputToken).quotient)) {\n      throw new InsufficientReservesError()\n    }\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, [inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)]]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, TokenAmount[]] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const inputToken = outputAmount.currency.equals(this.token0) ? this.token1 : this.token0\n\n    const outputReserve = this.virtualReserveOf(outputAmount.currency)\n    const inputReserve = this.virtualReserveOf(inputToken)\n    ///\n    let numerator = JSBI.multiply(inputReserve.quotient, outputAmount.quotient)\n    let denominator = JSBI.subtract(outputReserve.quotient, outputAmount.quotient)\n    const inputAmountWithFee = JSBI.add(JSBI.divide(numerator, denominator), ONE)\n\n    numerator = JSBI.multiply(inputAmountWithFee, PRECISION)\n    denominator = JSBI.subtract(PRECISION, this.fee)\n\n    const inputAmount = TokenAmount.fromRawAmount(\n      inputToken,\n      JSBI.divide(JSBI.subtract(JSBI.add(numerator, denominator), ONE), denominator)\n    )\n    return [inputAmount, [inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)]]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return TokenAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeBps: JSBI = ZERO,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (JSBI.equal(feeBps, ZERO)) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.virtualReserve0.quotient, this.virtualReserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast)), feeBps)\n          const denominator = JSBI.multiply(JSBI.add(rootK, rootKLast), JSBI.BigInt(5000))\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(TokenAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return TokenAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\n\n// import { Currency, ETHER } from './currency'\n// import { Token, WETH } from './token'\nimport { Pair } from './pair'\n// import { Price } from './fractions/price'\nimport { ChainId, Token, Price, Currency } from '@zuluswap/zs-sdk-core'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n  // public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(pair.priceOf(this.path[i]))\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ONE, ZERO } from '../constants'\n// import { sortedInsert } from '../utils'\n// import { Currency, ETHER } from './currency'\nimport {\n  CurrencyAmount,\n  Currency,\n  Price,\n  Percent,\n  TradeType,\n  TokenAmount,\n  Fraction,\n  sortedInsert,\n  computePriceImpact\n} from '@zuluswap/zs-sdk-core'\n// import { Fraction } from './fractions/fraction'\n// import { Percent } from './fractions/percent'\n// import { Price } from './fractions/price'\n// import { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\n// import { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\n// export function computePriceImpact(\n//   midPrice: Price,\n//   inputAmount: CurrencyAmount,\n//   outputAmount: CurrencyAmount\n// ): Percent {\n//   const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n//   // calculate slippage := (exactQuote - outputAmount) / exactQuote\n//   const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n//   return new Percent(slippage.numerator, slippage.denominator)\n// }\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  //vutien\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\n// function wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n//   if (currencyAmount instanceof TokenAmount) return currencyAmount\n//   if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n//   invariant(false, 'CURRENCY')\n// }\n\n// function wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n//   if (currency instanceof Token) return currency\n//   if (currency === ETHER) return WETH[chainId]\n//   invariant(false, 'CURRENCY')\n// }\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  // public readonly nextMidPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    const tokenAmounts: TokenAmount[] = new Array(route.path.length)\n    const nextInputReserves: TokenAmount[] = new Array(route.pairs.length)\n    const nextOutputReserves: TokenAmount[] = new Array(route.pairs.length)\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(tokenAmounts[i])\n\n        tokenAmounts[i + 1] = outputAmount\n        nextInputReserves[i] = nextPair[0]\n        nextOutputReserves[i] = nextPair[1]\n      }\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n        nextInputReserves[i - 1] = nextPair[0]\n        nextOutputReserves[i - 1] = nextPair[1]\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n        : CurrencyAmount.fromFractionalAmount(route.input, tokenAmounts[0].numerator, tokenAmounts[0].denominator)\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n        : CurrencyAmount.fromFractionalAmount(\n            route.output,\n            tokenAmounts[tokenAmounts.length - 1].numerator,\n            tokenAmounts[tokenAmounts.length - 1].denominator\n          )\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    // this.nextMidPrice = Price.fromReserves(nextInputReserves, nextOutputReserves)\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[][],\n    originalAmountIn: CurrencyAmount<TInput>,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    currencyAmountIn: CurrencyAmount<Currency> = originalAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    // const chainId: ChainId | undefined =\n    //   currencyAmountIn instanceof TokenAmount\n    //     ? currencyAmountIn.token.chainId\n    //     : currencyOut instanceof Token\n    //     ? currencyOut.chainId\n    //     : undefined\n    // invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = currencyAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      invariant(pair.length > 0, 'PAIRS')\n\n      // pair irrelevant\n      if (!pair[0].token0.equals(amountIn.currency) && !pair[0].token1.equals(amountIn.currency)) continue\n      const token0 = pair[0].token0\n      const token1 = pair[0].token1\n\n      // iterate each pool, find the best rate\n      let bestPool: Pair | undefined\n      let bestAmountOut: TokenAmount | undefined\n      for (let j = 0; j < pair.length; j++) {\n        const pool = pair[j]\n        invariant(pool.token0.equals(token0), 'INVALID_PAIR')\n        invariant(pool.token1.equals(token1), 'INVALID_PAIR')\n        if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n        let amountOut: TokenAmount\n        try {\n          ;[amountOut] = pool.getOutputAmount(amountIn)\n        } catch (error) {\n          // input too low || not enough liquidity in this pair\n          if (error.isInsufficientInputAmountError || error.isInsufficientReservesError) {\n            continue\n          }\n          throw error\n        }\n\n        if (bestAmountOut === undefined) {\n          bestAmountOut = amountOut\n          bestPool = pool\n        } else {\n          if (amountOut.greaterThan(bestAmountOut)) {\n            bestAmountOut = amountOut\n            bestPool = pool\n          }\n        }\n      }\n      // not found any pool has rate\n\n      if (bestAmountOut === undefined || bestPool === undefined) {\n        continue\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (bestAmountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, bestPool], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          originalAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, bestPool],\n          bestAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[][],\n    currencyIn: TInput,\n    originalAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    currencyAmountOut: CurrencyAmount<Currency> = originalAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    // const chainId: ChainId | undefined =\n    //   currencyAmountOut instanceof TokenAmount\n    //     ? currencyAmountOut.token.chainId\n    //     : currencyIn instanceof Token\n    //     ? currencyIn.chainId\n    //     : undefined\n    // invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = currencyAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n\n      invariant(pair.length > 0, 'PAIRS')\n\n      // pair irrelevant\n      if (!pair[0].token0.equals(amountOut.currency) && !pair[0].token1.equals(amountOut.currency)) continue\n      const token0 = pair[0].token0\n      const token1 = pair[0].token1\n\n      // iterate each pool, find the best rate\n      let bestPool: Pair | undefined\n      let bestAmountIn: TokenAmount | undefined\n      for (let j = 0; j < pair.length; j++) {\n        let pool = pair[j]\n        invariant(pool.token0.equals(token0), 'INVALID_PAIR')\n        invariant(pool.token1.equals(token1), 'INVALID_PAIR')\n        if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n        let amountIn: TokenAmount\n        try {\n          ;[amountIn] = pool.getInputAmount(amountOut)\n        } catch (error) {\n          // input too low || not enough liquidity in this pair\n          if (error.isInsufficientInputAmountError || error.isInsufficientReservesError) {\n            continue\n          }\n          throw error\n        }\n\n        if (bestAmountIn === undefined) {\n          bestAmountIn = amountIn\n          bestPool = pool\n        } else {\n          if (amountIn.lessThan(bestAmountIn)) {\n            bestAmountIn = amountIn\n            bestPool = pool\n          }\n        }\n      }\n\n      // not found any pool has rate\n      if (bestAmountIn === undefined || bestPool === undefined) {\n        continue\n      }\n\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (bestAmountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([bestPool, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          originalAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [bestPool, ...currentPairs],\n          bestAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, CurrencyAmount, Percent, validateAndParseAddress, TradeType } from '@zuluswap/zs-sdk-core'\nimport { Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the DmmExchange Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the DmmExchange Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the DmmExchange Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient, trade.inputAmount.currency.chainId)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const pairsPath: string[] = trade.route.pairs.map(pair => pair.address)\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, pairsPath, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, pairsPath, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Token, TokenAmount, ChainId } from '@zuluswap/zs-sdk-core'\nimport { Pair } from './entities/pair'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport DMMFactory from './abis/DMMFactory.json'\nimport DMMPool from './abis/DMMPool.json'\n\nimport JSBI from 'jsbi'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\nlet PAIR_ADDRESS_CACHE: { [chainId: number]: { [token0Address: string]: { [token1Address: string]: string[] } } } = {}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about pairs and constructs pairs array from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param factoryAddress address of dmmFactory\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    factoryAddress: string,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair[]> {\n    const addresses = await Fetcher.fetchPairAddresses(tokenA, tokenB, factoryAddress, provider)\n    return Promise.all(\n      addresses.map(async address => {\n        let poolContract = new Contract(address, DMMPool.abi, provider)\n        const [reserve0, reserve1, vReserve0, vReserve1, feeInPrecision] = await poolContract.getTradeInfo()\n        const ampBps = await poolContract.ampBps()\n        const balances = tokenA.sortsBefore(tokenB)\n          ? [reserve0, reserve1, vReserve0, vReserve1]\n          : [reserve1, reserve0, vReserve1, vReserve0]\n        return new Pair(\n          address,\n          TokenAmount.fromRawAmount(tokenA, balances[0]),\n          TokenAmount.fromRawAmount(tokenB, balances[1]),\n          TokenAmount.fromRawAmount(tokenA, balances[2]),\n          TokenAmount.fromRawAmount(tokenB, balances[3]),\n          JSBI.BigInt(feeInPrecision),\n          JSBI.BigInt(ampBps)\n        )\n      })\n    )\n  }\n\n  /**\n   * Fetches information about pair addresses from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairAddresses(\n    tokenA: Token,\n    tokenB: Token,\n    factoryAddress: string,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<string[]> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const chainId = tokenA.chainId\n    if (typeof PAIR_ADDRESS_CACHE?.[chainId]?.[tokens[1].address]?.[tokenB.address] == 'undefined') {\n      const factory = await new Contract(factoryAddress, DMMFactory.abi, provider)\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [chainId]: {\n          ...PAIR_ADDRESS_CACHE?.[chainId],\n          [tokens[0].address]: {\n            ...PAIR_ADDRESS_CACHE?.[chainId]?.[tokens[0].address],\n            [tokens[1].address]: await factory.getPools(tokens[0].address, tokens[1].address)\n          }\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[chainId][tokens[0].address][tokens[1].address]\n  }\n}\n"],"names":["SolidityType","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","TEN","_100","PRECISION","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","Pair","address","tokenAmountA","tokenAmountB","virtualTokenAmountA","virtualTokenAmountB","fee","amp","tokenAmounts","currency","sortsBefore","virtualTokenAmounts","liquidityToken","Token","chainId","involvesToken","token","equals","this","token0","token1","priceOf","invariant","token0Price","token1Price","priceOfReal","r1","divide","r2","Price","denominator","numerator","reserveOf","reserve0","reserve1","virtualReserveOf","virtualReserve0","virtualReserve1","getOutputAmount","inputAmount","equal","quotient","outputToken","inputReserve","outputReserve","inputAmountWithFee","multiply","subtract","add","outputAmount","TokenAmount","fromRawAmount","greaterThanOrEqual","getInputAmount","inputToken","getLiquidityMinted","totalSupply","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeBps","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","result","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","nextInputReserves","nextOutputReserves","TradeType","EXACT_INPUT","i","nextPair","CurrencyAmount","fromFractionalAmount","EXACT_OUTPUT","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","originalAmountIn","currencyOut","currentPairs","currencyAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","bestPool","bestAmountOut","j","pool","error","isInsufficientInputAmountError","isInsufficientReservesError","undefined","sortedInsert","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","originalAmountOut","currencyAmountOut","tokenIn","bestAmountIn","toHex","currencyAmount","toString","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","methodName","args","value","to","validateAndParseAddress","recipient","allowedSlippage","pairsPath","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","ChainId","MAINNET","PAIR_ADDRESS_CACHE","Fetcher","fetchTokenData","provider","symbol","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","decimals","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","tokenA","tokenB","factoryAddress","fetchPairAddresses","addresses","Promise","all","poolContract","DMMPool","abi","getTradeInfo","vReserve0","vReserve1","feeInPrecision","ampBps","balances","tokens","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$_","_PAIR_ADDRESS_CACHE$_2","DMMFactory","factory","getPools","_PAIR_ADDRESS_CACHE2","_PAIR_ADDRESS_CACHE3","_PAIR_ADDRESS_CACHE3$"],"mappings":"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"}