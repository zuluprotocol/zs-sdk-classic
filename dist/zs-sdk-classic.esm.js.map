{"version":3,"file":"zs-sdk-classic.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const PRECISION = JSBI.BigInt(1e18)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { Token, Price, TokenAmount, BigintIsh, sqrt, ChainId } from '@zuluswap/zs-sdk-core'\n// import { TokenAmount, Price } from './fractions'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { MINIMUM_LIQUIDITY, ZERO, ONE, PRECISION } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n// import { Token } from './token'\n\n//TODO: rename to Pool object\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  private readonly virtualTokenAmounts: [TokenAmount, TokenAmount]\n  public readonly fee: JSBI\n  public readonly address: string\n  public readonly amp: JSBI\n\n  public constructor(\n    address: string,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount,\n    virtualTokenAmountA: TokenAmount,\n    virtualTokenAmountB: TokenAmount,\n    fee: JSBI,\n    amp: JSBI\n  ) {\n    this.address = address\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    const virtualTokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [virtualTokenAmountA, virtualTokenAmountB]\n      : [virtualTokenAmountB, virtualTokenAmountA]\n\n    this.liquidityToken = new Token(tokenAmounts[0].currency.chainId, address, 18, 'DMM-LP', 'DMM LP')\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.virtualTokenAmounts = virtualTokenAmounts as [TokenAmount, TokenAmount]\n    this.fee = fee\n    this.amp = amp\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.virtualTokenAmounts[1].divide(this.virtualTokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.virtualTokenAmounts[0].divide(this.virtualTokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  public priceOfReal(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    const r1 = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    const r2 = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return token.equals(this.token0)\n      ? new Price(this.token0, this.token1, r1.denominator, r1.numerator)\n      : new Price(this.token1, this.token0, r2.denominator, r2.numerator)\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public get virtualReserve0(): TokenAmount {\n    return this.virtualTokenAmounts[0]\n  }\n\n  public get virtualReserve1(): TokenAmount {\n    return this.virtualTokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public virtualReserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.virtualReserve0 : this.virtualReserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, TokenAmount[]] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputToken = inputAmount.currency.equals(this.token0) ? this.token1 : this.token0\n    const inputReserve = this.virtualReserveOf(inputAmount.currency)\n    const outputReserve = this.virtualReserveOf(outputToken)\n\n    const inputAmountWithFee = JSBI.divide(\n      JSBI.multiply(inputAmount.quotient, JSBI.subtract(PRECISION, this.fee)),\n      PRECISION\n    )\n\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(inputReserve.quotient, inputAmountWithFee)\n\n    const outputAmount = TokenAmount.fromRawAmount(outputToken, JSBI.divide(numerator, denominator))\n\n    if (JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputToken).quotient)) {\n      throw new InsufficientReservesError()\n    }\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, [inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)]]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, TokenAmount[]] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const inputToken = outputAmount.currency.equals(this.token0) ? this.token1 : this.token0\n\n    const outputReserve = this.virtualReserveOf(outputAmount.currency)\n    const inputReserve = this.virtualReserveOf(inputToken)\n    ///\n    let numerator = JSBI.multiply(inputReserve.quotient, outputAmount.quotient)\n    let denominator = JSBI.subtract(outputReserve.quotient, outputAmount.quotient)\n    const inputAmountWithFee = JSBI.add(JSBI.divide(numerator, denominator), ONE)\n\n    numerator = JSBI.multiply(inputAmountWithFee, PRECISION)\n    denominator = JSBI.subtract(PRECISION, this.fee)\n\n    const inputAmount = TokenAmount.fromRawAmount(\n      inputToken,\n      JSBI.divide(JSBI.subtract(JSBI.add(numerator, denominator), ONE), denominator)\n    )\n    return [inputAmount, [inputReserve.add(inputAmount), outputReserve.subtract(outputAmount)]]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return TokenAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeBps: JSBI = ZERO,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (JSBI.equal(feeBps, ZERO)) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.virtualReserve0.quotient, this.virtualReserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast)), feeBps)\n          const denominator = JSBI.multiply(JSBI.add(rootK, rootKLast), JSBI.BigInt(5000))\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(TokenAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return TokenAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\n\n// import { Currency, ETHER } from './currency'\n// import { Token, WETH } from './token'\nimport { Pair } from './pair'\n// import { Price } from './fractions/price'\nimport { ChainId, Token, Price, Currency } from '@zuluswap/zs-sdk-core'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n  // public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(pair.priceOf(this.path[i]))\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ONE, ZERO } from '../constants'\n// import { sortedInsert } from '../utils'\n// import { Currency, ETHER } from './currency'\nimport {\n  CurrencyAmount,\n  Currency,\n  Price,\n  Percent,\n  TradeType,\n  TokenAmount,\n  Fraction,\n  sortedInsert,\n  computePriceImpact\n} from '@zuluswap/zs-sdk-core'\n// import { Fraction } from './fractions/fraction'\n// import { Percent } from './fractions/percent'\n// import { Price } from './fractions/price'\n// import { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\n// import { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\n// export function computePriceImpact(\n//   midPrice: Price,\n//   inputAmount: CurrencyAmount,\n//   outputAmount: CurrencyAmount\n// ): Percent {\n//   const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n//   // calculate slippage := (exactQuote - outputAmount) / exactQuote\n//   const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n//   return new Percent(slippage.numerator, slippage.denominator)\n// }\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  //vutien\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\n// function wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n//   if (currencyAmount instanceof TokenAmount) return currencyAmount\n//   if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n//   invariant(false, 'CURRENCY')\n// }\n\n// function wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n//   if (currency instanceof Token) return currency\n//   if (currency === ETHER) return WETH[chainId]\n//   invariant(false, 'CURRENCY')\n// }\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  // public readonly nextMidPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    const tokenAmounts: TokenAmount[] = new Array(route.path.length)\n    const nextInputReserves: TokenAmount[] = new Array(route.pairs.length)\n    const nextOutputReserves: TokenAmount[] = new Array(route.pairs.length)\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(tokenAmounts[i])\n\n        tokenAmounts[i + 1] = outputAmount\n        nextInputReserves[i] = nextPair[0]\n        nextOutputReserves[i] = nextPair[1]\n      }\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n        nextInputReserves[i - 1] = nextPair[0]\n        nextOutputReserves[i - 1] = nextPair[1]\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n        : CurrencyAmount.fromFractionalAmount(route.input, tokenAmounts[0].numerator, tokenAmounts[0].denominator)\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n        : CurrencyAmount.fromFractionalAmount(\n            route.output,\n            tokenAmounts[tokenAmounts.length - 1].numerator,\n            tokenAmounts[tokenAmounts.length - 1].denominator\n          )\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    // this.nextMidPrice = Price.fromReserves(nextInputReserves, nextOutputReserves)\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[][],\n    originalAmountIn: CurrencyAmount<TInput>,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    currencyAmountIn: CurrencyAmount<Currency> = originalAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    // const chainId: ChainId | undefined =\n    //   currencyAmountIn instanceof TokenAmount\n    //     ? currencyAmountIn.token.chainId\n    //     : currencyOut instanceof Token\n    //     ? currencyOut.chainId\n    //     : undefined\n    // invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = currencyAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      invariant(pair.length > 0, 'PAIRS')\n\n      // pair irrelevant\n      if (!pair[0].token0.equals(amountIn.currency) && !pair[0].token1.equals(amountIn.currency)) continue\n      const token0 = pair[0].token0\n      const token1 = pair[0].token1\n\n      // iterate each pool, find the best rate\n      let bestPool: Pair | undefined\n      let bestAmountOut: TokenAmount | undefined\n      for (let j = 0; j < pair.length; j++) {\n        const pool = pair[j]\n        invariant(pool.token0.equals(token0), 'INVALID_PAIR')\n        invariant(pool.token1.equals(token1), 'INVALID_PAIR')\n        if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n        let amountOut: TokenAmount\n        try {\n          ;[amountOut] = pool.getOutputAmount(amountIn)\n        } catch (error) {\n          // input too low || not enough liquidity in this pair\n          if (error.isInsufficientInputAmountError || error.isInsufficientReservesError) {\n            continue\n          }\n          throw error\n        }\n\n        if (bestAmountOut === undefined) {\n          bestAmountOut = amountOut\n          bestPool = pool\n        } else {\n          if (amountOut.greaterThan(bestAmountOut)) {\n            bestAmountOut = amountOut\n            bestPool = pool\n          }\n        }\n      }\n      // not found any pool has rate\n\n      if (bestAmountOut === undefined || bestPool === undefined) {\n        continue\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (bestAmountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, bestPool], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          originalAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, bestPool],\n          bestAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[][],\n    currencyIn: TInput,\n    originalAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    currencyAmountOut: CurrencyAmount<Currency> = originalAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    // const chainId: ChainId | undefined =\n    //   currencyAmountOut instanceof TokenAmount\n    //     ? currencyAmountOut.token.chainId\n    //     : currencyIn instanceof Token\n    //     ? currencyIn.chainId\n    //     : undefined\n    // invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = currencyAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n\n      invariant(pair.length > 0, 'PAIRS')\n\n      // pair irrelevant\n      if (!pair[0].token0.equals(amountOut.currency) && !pair[0].token1.equals(amountOut.currency)) continue\n      const token0 = pair[0].token0\n      const token1 = pair[0].token1\n\n      // iterate each pool, find the best rate\n      let bestPool: Pair | undefined\n      let bestAmountIn: TokenAmount | undefined\n      for (let j = 0; j < pair.length; j++) {\n        let pool = pair[j]\n        invariant(pool.token0.equals(token0), 'INVALID_PAIR')\n        invariant(pool.token1.equals(token1), 'INVALID_PAIR')\n        if (pool.reserve0.equalTo(ZERO) || pool.reserve1.equalTo(ZERO)) continue\n\n        let amountIn: TokenAmount\n        try {\n          ;[amountIn] = pool.getInputAmount(amountOut)\n        } catch (error) {\n          // input too low || not enough liquidity in this pair\n          if (error.isInsufficientInputAmountError || error.isInsufficientReservesError) {\n            continue\n          }\n          throw error\n        }\n\n        if (bestAmountIn === undefined) {\n          bestAmountIn = amountIn\n          bestPool = pool\n        } else {\n          if (amountIn.lessThan(bestAmountIn)) {\n            bestAmountIn = amountIn\n            bestPool = pool\n          }\n        }\n      }\n\n      // not found any pool has rate\n      if (bestAmountIn === undefined || bestPool === undefined) {\n        continue\n      }\n\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (bestAmountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([bestPool, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          originalAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [bestPool, ...currentPairs],\n          bestAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, CurrencyAmount, Percent, validateAndParseAddress, TradeType } from '@zuluswap/zs-sdk-core'\nimport { Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the DmmExchange Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the DmmExchange Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the DmmExchange Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient, trade.inputAmount.currency.chainId)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const pairsPath: string[] = trade.route.pairs.map(pair => pair.address)\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, pairsPath, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, pairsPath, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata pairsPath, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, pairsPath, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Token, TokenAmount, ChainId } from '@zuluswap/zs-sdk-core'\nimport { Pair } from './entities/pair'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport DMMFactory from './abis/DMMFactory.json'\nimport DMMPool from './abis/DMMPool.json'\n\nimport JSBI from 'jsbi'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\nlet PAIR_ADDRESS_CACHE: { [chainId: number]: { [token0Address: string]: { [token1Address: string]: string[] } } } = {}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about pairs and constructs pairs array from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param factoryAddress address of dmmFactory\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    factoryAddress: string,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair[]> {\n    const addresses = await Fetcher.fetchPairAddresses(tokenA, tokenB, factoryAddress, provider)\n    return Promise.all(\n      addresses.map(async address => {\n        let poolContract = new Contract(address, DMMPool.abi, provider)\n        const [reserve0, reserve1, vReserve0, vReserve1, feeInPrecision] = await poolContract.getTradeInfo()\n        const ampBps = await poolContract.ampBps()\n        const balances = tokenA.sortsBefore(tokenB)\n          ? [reserve0, reserve1, vReserve0, vReserve1]\n          : [reserve1, reserve0, vReserve1, vReserve0]\n        return new Pair(\n          address,\n          TokenAmount.fromRawAmount(tokenA, balances[0]),\n          TokenAmount.fromRawAmount(tokenB, balances[1]),\n          TokenAmount.fromRawAmount(tokenA, balances[2]),\n          TokenAmount.fromRawAmount(tokenB, balances[3]),\n          JSBI.BigInt(feeInPrecision),\n          JSBI.BigInt(ampBps)\n        )\n      })\n    )\n  }\n\n  /**\n   * Fetches information about pair addresses from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairAddresses(\n    tokenA: Token,\n    tokenB: Token,\n    factoryAddress: string,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<string[]> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n    const chainId = tokenA.chainId\n    if (typeof PAIR_ADDRESS_CACHE?.[chainId]?.[tokens[1].address]?.[tokenB.address] == 'undefined') {\n      const factory = await new Contract(factoryAddress, DMMFactory.abi, provider)\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [chainId]: {\n          ...PAIR_ADDRESS_CACHE?.[chainId],\n          [tokens[0].address]: {\n            ...PAIR_ADDRESS_CACHE?.[chainId]?.[tokens[0].address],\n            [tokens[1].address]: await factory.getPools(tokens[0].address, tokens[1].address)\n          }\n        }\n      }\n    }\n    return PAIR_ADDRESS_CACHE[chainId][tokens[0].address][tokens[1].address]\n  }\n}\n"],"names":["MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","TEN","_100","PRECISION","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","Pair","address","tokenAmountA","tokenAmountB","virtualTokenAmountA","virtualTokenAmountB","fee","amp","tokenAmounts","currency","sortsBefore","virtualTokenAmounts","liquidityToken","Token","chainId","involvesToken","token","equals","token0","token1","priceOf","invariant","token0Price","token1Price","priceOfReal","r1","divide","r2","Price","denominator","numerator","reserveOf","reserve0","reserve1","virtualReserveOf","virtualReserve0","virtualReserve1","getOutputAmount","inputAmount","equal","quotient","outputToken","inputReserve","outputReserve","inputAmountWithFee","multiply","subtract","add","outputAmount","TokenAmount","fromRawAmount","greaterThanOrEqual","getInputAmount","inputToken","getLiquidityMinted","totalSupply","liquidity","sqrt","amount0","amount1","lessThanOrEqual","greaterThan","getLiquidityValue","feeBps","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","result","Route","pairs","input","output","length","every","pair","wrappedInput","wrapped","path","entries","i","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","nextInputReserves","nextOutputReserves","TradeType","EXACT_INPUT","nextPair","CurrencyAmount","fromFractionalAmount","EXACT_OUTPUT","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","originalAmountIn","currencyOut","currentPairs","currencyAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","bestPool","bestAmountOut","j","pool","error","isInsufficientInputAmountError","isInsufficientReservesError","undefined","sortedInsert","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","originalAmountOut","currencyAmountOut","tokenIn","bestAmountIn","toHex","currencyAmount","toString","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","to","validateAndParseAddress","recipient","allowedSlippage","pairsPath","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","value","TOKEN_DECIMALS_CACHE","ChainId","MAINNET","PAIR_ADDRESS_CACHE","Fetcher","fetchTokenData","provider","symbol","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","decimals","then","fetchPairData","tokenA","tokenB","factoryAddress","fetchPairAddresses","addresses","Promise","all","poolContract","DMMPool","abi","getTradeInfo","vReserve0","vReserve1","feeInPrecision","ampBps","balances","tokens","DMMFactory","factory","getPools"],"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"}